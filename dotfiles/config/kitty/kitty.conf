# vim:fileencoding=utf-8:ft=conf

# Fonts {{{
# You can get a list of full family names available on your computer by running
# kitty list-fonts
font_family      Input Mono
italic_font      auto
bold_font        auto
bold_italic_font auto

# Font size (in pts)
font_size        8.25

# The amount the font size is changed by (in pts) when increasing/decreasing
# the font size in a running terminal.
font_size_delta 2

# Symbol mapping (special font for specified unicode code points). Map the
# specified unicode codepoints to a particular font. Useful if you need special
# rendering for some symbols, such as for Powerline. Avoids the need for
# patched fonts. Each unicode code point is specified in the form U+<code point
# in hexadecimal>. You can specify multiple code points, separated by commas
# and ranges separated by hyphens. symbol_map itself can be specified multiple times.
# Syntax is:
#
# symbol_map codepoints Font Family Name
#
# For example:
#
# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols
# }}}


# Scrollback {{{
# Number of lines of history to keep in memory for scrolling back
scrollback_lines 8192
# }}}


# Mouse {{{
# The modifier keys to press when clicking with the mouse on URLs to open the URL
open_url_modifiers kitty_mod

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
open_url_with default

# Copy to clipboard on select. With this enabled, simply selecting text with
# the mouse will cause the text to be copied to clipboard. Useful on platforms
# such as macOS/Wayland that do not have the concept of primary selections. Note
# that this is a security risk, as all programs, including websites open in your
# browser can read the contents of the clipboard.
copy_on_select {%@@ if env['HOME'][:7] == '/Users/' @@%}yes{%@@ else @@%}no{%@@ endif @@%}

# The modifiers to use rectangular selection (i.e. to select text in a
# rectangular block with the mouse)
rectangle_select_modifiers alt

# Characters considered part of a word when double clicking. In addition to these characters
# any character that is marked as an alpha-numeric character in the unicode
# database will be matched.
select_by_word_characters :@-./_~?&=%+#
# }}}


# Audio/visual bell {{{
# Visual bell duration. Flash the screen when a bell occurs for the specified number of
# seconds. Set to zero to disable.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell no

# Request window attention on bell.
# Makes the dock icon bounce on macOS or the taskbar flash on linux.
window_alert_on_bell yes

# Show a bell symbol on the tab if a bell occurs in one of the windows in the
# tab and the window is not the currently focused window
bell_on_tab yes
# }}}


# Window layout {{{
# Fade the text in inactive windows by the specified amount (a number between
# zero and one, with 0 being fully faded).
inactive_text_alpha 0.8
# }}}


# Tab bar {{{
# Which edge to show the tab bar on, top or bottom
tab_bar_edge bottom

# The separator between tabs in the tab bar
tab_separator "  "

# Tab bar colors and styles
active_tab_foreground #fff
active_tab_background #444
active_tab_font_style bold-italic
inactive_tab_foreground #aaa
inactive_tab_background #191919
inactive_tab_font_style normal
# }}}


# Color scheme {{{
# The opacity of the background. A number between 0 and 1, where 1 is opaque and 0 is fully transparent.
# This will only work if supported by the OS (for instance, when using a compositor under X11). Note
# that it only sets the default background color's opacity. This is so that
# things like the status bar in vim, powerline prompts, etc. still look good.
# But it means that if you use a color theme with a background color in your
# editor, it will not be rendered as transparent.  Instead you should change the
# default background color in your kitty config and not use a background color
# in the editor color scheme. Or use the escape codes to set the terminals
# default colors in a shell script to launch your editor.
# Be aware that using a value less than 1.0 is a (possibly significant) performance hit.
#background_opacity 0.9
# }}}


# Advanced {{{
# Allow other programs to control kitty. If you turn this on other programs can
# control all aspects of kitty, including sending text to kitty windows,
# opening new windows, closing windows, reading the content of windows, etc.
# Note that this even works over ssh connections.
allow_remote_control no
# }}}


# Keyboard shortcuts {{{
clear_all_shortcuts yes

# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html

# The value of kitty_mod is used as the modifier for all default shortcuts, you
# can change it in your kitty.conf to change the modifiers for all the default
# shortcuts.
kitty_mod ctrl+shift

# Clipboard {{{
map kitty_mod+v        paste_from_clipboard
map kitty_mod+s        paste_from_selection
map kitty_mod+c        copy_to_clipboard
map shift+insert       paste_from_selection
# }}}

# Scrolling {{{
map kitty_mod+up        scroll_line_up
map kitty_mod+down      scroll_line_down
map shift+page_up       scroll_page_up
map shift+page_down     scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
map kitty_mod+h         show_scrollback
# }}}

# Window management {{{
#map kitty_mod+enter    new_window
#map kitty_mod+n        new_os_window
#map kitty_mod+w        close_window
#map kitty_mod+]        next_window
#map kitty_mod+[        previous_window
#map kitty_mod+f        move_window_forward
#map kitty_mod+b        move_window_backward
#map kitty_mod+`        move_window_to_top
#map kitty_mod+1        first_window
#map kitty_mod+2        second_window
#map kitty_mod+3        third_window
#map kitty_mod+4        fourth_window
#map kitty_mod+5        fifth_window
#map kitty_mod+6        sixth_window
#map kitty_mod+7        seventh_window
#map kitty_mod+8        eighth_window
#map kitty_mod+9        ninth_window
#map kitty_mod+0        tenth_window
map kitty_mod+y        new_os_window @ansi less +G -R
# }}}

# Tab management {{{
#map kitty_mod+right    next_tab
#map kitty_mod+left     previous_tab
map kitty_mod+u        next_tab
map kitty_mod+o        previous_tab
map ctrl+tab           next_tab
map ctrl+shift+tab     previous_tab
map kitty_mod+t        new_tab_with_cwd
map kitty_mod+q        close_tab
map kitty_mod+l        next_layout
map kitty_mod+alt+u    move_tab_forward
map kitty_mod+alt+o    move_tab_backward
map kitty_mod+alt+t    set_tab_title
# You can also create shortcuts to go to specific tabs, with 1 being the first tab
# map ctrl+alt+1          goto_tab 1
# map ctrl+alt+2          goto_tab 2
# }}}

# Font sizes {{{
map kitty_mod+equal    increase_font_size
map kitty_mod+minus    decrease_font_size
map kitty_mod+backspace restore_font_size
# To setup shortcuts for specific font sizes, follow the example below:
# map kitty_mod+f6     set_font_size 10.0
# map kitty_mod+f7     set_font_size 20.5
# }}}

# Select and act on visible text {{{
# Use the hints kitten to select text and either pass it to an external program or
# insert it into the terminal or copy it to the clipboard.
#
# Open a currently visible URL using the keyboard. The program used to open the
# URL is specified in open_url_with.
map kitty_mod+e         run_kitten text hints

# Select a path/filename and insert it into the terminal. Useful, for instance to
# run git commands on a filename output from a previous git command.
map kitty_mod+p>f       run_kitten text hints --type path --program -

# Select a path/filename and open it with the default open program.
map kitty_mod+p>shift+f run_kitten text hints --type path

# Select a line of text and insert it into the terminal. Use for the
# output of things like: ls -1
map kitty_mod+p>l       run_kitten text hints --type line --program -

# Select words and insert into terminal.
map kitty_mod+p>w       run_kitten text hints --type word --program -

# The hints kitten has many more modes of operation that you can map to different
# shortcuts. For a full description run: kitty +kitten hints --help
# }}}

# Miscellaneous {{{
map kitty_mod+f11      toggle_fullscreen
map kitty_mod+x        input_unicode_character
#map kitty_mod+f2       edit_config_file
# Open the kitty shell in a new window/tab/overlay/os_window to control kitty using commands.
map kitty_mod+escape   kitty_shell window
# }}}

# Hacks for missing key combinations {{{
map ctrl+backspace  send_text normal \x08
# }}}

# }}}


# OS specific tweaks {{{
# Change the color of the kitty window's titlebar on macOS. A value of "system"
# means to use the default system color, a value of "background" means to use
# the background color of the currently active window and finally you can use
# an arbitrary color, such as #12af59 or "red". WARNING: This option works by
# using a hack, as there is no proper Cocoa API for it. It sets the background
# color of the entire window and makes the titlebar transparent. As such it is
# incompatible with background_opacity. If you want to use both, you are
# probably better off just hiding the titlebar with macos_hide_titlebar.
macos_titlebar_color background

# Hide the kitty window's title bar on macOS.
#macos_hide_titlebar yes
# }}}
